// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id @default(cuid())
  email             String      @unique
  password          String
  firstName         String?
  lastName          String?
  phone             String?
  location          String?
  linkedinUrl       String?
  portfolioUrl      String?
  skills            String[]
  experience        Json?
  profilePicture    String?
  isVerified        Boolean     @default(false)
  privacySettings   Json        @default("{\"profileVisible\": true, \"contactVisible\": false}")
  rankingScore      Float       @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  applications      Application[]
  resumes           Resume[]
  notifications     Notification[]
  recruiterContacts RecruiterContact[] // Changed from RecruiterContact[] to recruiterContacts RecruiterContact[]

  @@map("users")
}

model Application {
  id                  String            @id @default(cuid())
  userId              String
  companyName         String
  positionTitle       String
  jobDescription      String
  applicationDeadline DateTime?
  salaryMin           Int?
  salaryMax           Int?
  currency            String            @default("USD")
  companyWebsite      String?
  applicationSource   ApplicationSource? // Made optional as per previous discussion
  status              ApplicationStatus @default(SAVED)
  notes               String?
  followUpDate        DateTime?
  appliedDate         DateTime?
  interviewDate       DateTime?
  responseDate        DateTime?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  resume              Resume?           @relation(fields: [resumeId], references: [id])
  resumeId            String?

  @@map("applications")
}

model Resume {
  id             String      @id @default(cuid())
  userId         String
  title          String
  fileName       String? // Original filename
  fileUrl        String? // UploadThing file URL
  fileSize       Int? // File size in bytes
  fileType       String? // MIME type (application/pdf, application/docx, etc.)
  content        Json? // Parsed resume content (optional)
  filePath       String? // For uploaded base resume file (deprecated, use fileUrl)
  isBase         Boolean     @default(false)
  jobDescription String? // For AI-customized resumes, the target job description
  optimizations  Json? // Store AI suggestions and changes
  version        Int         @default(1)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications   Application[]

  @@map("resumes")
}

model Recruiter {
  id               String           @id @default(cuid())
  email            String           @unique
  password         String // Consider hashing this securely
  companyName      String
  firstName        String?
  lastName         String?
  subscriptionTier SubscriptionTier @default(FREE)
  isVerified       Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt // Added updatedAt

  contacts RecruiterContact[]

  @@map("recruiters")
}

model RecruiterContact {
  id          String        @id @default(cuid())
  recruiterId String
  userId      String
  message     String? // Made optional, initial contact might not have a message
  status      ContactStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt // Added updatedAt

  recruiter Recruiter @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recruiter_contacts")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  // No updatedAt needed for notifications usually, unless they can be modified

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum ApplicationStatus {
  SAVED
  RESUME_PREPARED
  APPLIED
  APPLICATION_ACKNOWLEDGED
  INTERVIEW_SCHEDULED
  INTERVIEW_COMPLETED
  OFFER_RECEIVED
  REJECTED
  WITHDRAWN
}

enum ApplicationSource {
  LINKEDIN
  COMPANY_WEBSITE
  INDEED
  GLASSDOOR
  REFERRAL
  JOB_BOARD // Added generic job board
  NETWORKING_EVENT // Added networking event
  OTHER
}

enum SubscriptionTier {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE // Added enterprise tier
}

enum ContactStatus {
  PENDING
  ACCEPTED
  REJECTED
  ARCHIVED // Added archived status
}

enum NotificationType {
  APPLICATION_UPDATE
  INTERVIEW_REMINDER
  DEADLINE_REMINDER
  RECRUITER_CONTACT
  NEW_JOB_MATCH // Added for potential future feature
  PROFILE_VERIFICATION // Added for verification status
  SYSTEM_ANNOUNCEMENT // Added for system wide messages
  WELCOME // Added for new user welcome
}
